// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: auth.proto

package amo_project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationAmoClient is the client API for AuthorizationAmo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationAmoClient interface {
	GetToken(ctx context.Context, in *AuthAmoRequest, opts ...grpc.CallOption) (*AuthAmoResponse, error)
}

type authorizationAmoClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationAmoClient(cc grpc.ClientConnInterface) AuthorizationAmoClient {
	return &authorizationAmoClient{cc}
}

func (c *authorizationAmoClient) GetToken(ctx context.Context, in *AuthAmoRequest, opts ...grpc.CallOption) (*AuthAmoResponse, error) {
	out := new(AuthAmoResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthorizationAmo/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationAmoServer is the server API for AuthorizationAmo service.
// All implementations must embed UnimplementedAuthorizationAmoServer
// for forward compatibility
type AuthorizationAmoServer interface {
	GetToken(context.Context, *AuthAmoRequest) (*AuthAmoResponse, error)
	mustEmbedUnimplementedAuthorizationAmoServer()
}

// UnimplementedAuthorizationAmoServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationAmoServer struct {
}

func (UnimplementedAuthorizationAmoServer) GetToken(context.Context, *AuthAmoRequest) (*AuthAmoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAuthorizationAmoServer) mustEmbedUnimplementedAuthorizationAmoServer() {}

// UnsafeAuthorizationAmoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationAmoServer will
// result in compilation errors.
type UnsafeAuthorizationAmoServer interface {
	mustEmbedUnimplementedAuthorizationAmoServer()
}

func RegisterAuthorizationAmoServer(s grpc.ServiceRegistrar, srv AuthorizationAmoServer) {
	s.RegisterService(&AuthorizationAmo_ServiceDesc, srv)
}

func _AuthorizationAmo_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthAmoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationAmoServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthorizationAmo/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationAmoServer).GetToken(ctx, req.(*AuthAmoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationAmo_ServiceDesc is the grpc.ServiceDesc for AuthorizationAmo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationAmo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthorizationAmo",
	HandlerType: (*AuthorizationAmoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _AuthorizationAmo_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

// AuthorizationUnisenderClient is the client API for AuthorizationUnisender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationUnisenderClient interface {
	SaveToken(ctx context.Context, in *AuthUnisenderRequest, opts ...grpc.CallOption) (*AuthUnisenderResponse, error)
}

type authorizationUnisenderClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationUnisenderClient(cc grpc.ClientConnInterface) AuthorizationUnisenderClient {
	return &authorizationUnisenderClient{cc}
}

func (c *authorizationUnisenderClient) SaveToken(ctx context.Context, in *AuthUnisenderRequest, opts ...grpc.CallOption) (*AuthUnisenderResponse, error) {
	out := new(AuthUnisenderResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthorizationUnisender/SaveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationUnisenderServer is the server API for AuthorizationUnisender service.
// All implementations must embed UnimplementedAuthorizationUnisenderServer
// for forward compatibility
type AuthorizationUnisenderServer interface {
	SaveToken(context.Context, *AuthUnisenderRequest) (*AuthUnisenderResponse, error)
	mustEmbedUnimplementedAuthorizationUnisenderServer()
}

// UnimplementedAuthorizationUnisenderServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationUnisenderServer struct {
}

func (UnimplementedAuthorizationUnisenderServer) SaveToken(context.Context, *AuthUnisenderRequest) (*AuthUnisenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveToken not implemented")
}
func (UnimplementedAuthorizationUnisenderServer) mustEmbedUnimplementedAuthorizationUnisenderServer() {
}

// UnsafeAuthorizationUnisenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationUnisenderServer will
// result in compilation errors.
type UnsafeAuthorizationUnisenderServer interface {
	mustEmbedUnimplementedAuthorizationUnisenderServer()
}

func RegisterAuthorizationUnisenderServer(s grpc.ServiceRegistrar, srv AuthorizationUnisenderServer) {
	s.RegisterService(&AuthorizationUnisender_ServiceDesc, srv)
}

func _AuthorizationUnisender_SaveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUnisenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationUnisenderServer).SaveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthorizationUnisender/SaveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationUnisenderServer).SaveToken(ctx, req.(*AuthUnisenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationUnisender_ServiceDesc is the grpc.ServiceDesc for AuthorizationUnisender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationUnisender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthorizationUnisender",
	HandlerType: (*AuthorizationUnisenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveToken",
			Handler:    _AuthorizationUnisender_SaveToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
